buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'java'
apply plugin: 'idea'

version = "${version_mc}-${version_major}.${version_api}.${version_minor}.${version_patch}"
group = "yamahari.${mod_id}"
archivesBaseName = "${mod_id}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: 'official', version: "${version_mc}"
}

dependencies {
    minecraft "net.minecraftforge:forge:${version_mc}-${version_forge}"
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources', 'src/data/resources']
        }
    }

    api {
    }

    data {
    }
}

configurations {
    apiImplementation.extendsFrom(minecraft)
}

minecraft {
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            mods {
                ilikewood {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            mods {
                ilikewood {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property "${mod_id}.datagen.modid", "${mod_id}"
            args '--mod', "${mod_id}",
                    '--all',
                    '--output', file("src/data/resources/${mod_id}_resources"),
                    '--existing', file('src/main/resources/')
            mods {
                ilikewood {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }
    }
}

repositories {
    flatDir {
        dirs 'build/libs'
    }
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
}

dependencies {
    compileOnly fg.deobf("mezz.jei:jei-${version_mc}:${version_jei}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${version_mc}:${version_jei}")

    implementation sourceSets.api.output

    runtimeOnly project(path: ':config', configuration: 'configJars')
}


def replaceVersions = tasks.register('replaceVersions', Copy) {
    it.outputs.upToDateWhen { false }
    it.from(sourceSets.main.resources) {
        include 'META-INF/mods.toml'
        expand 'mod_id': mod_id,
                'version': version,
                'version_range_mc': version_range_mc,
                'version_range_loader': version_range_loader,
                'version_range_forge': version_range_forge
    }
    it.into "$buildDir/resources/main/"
}


processResources {
    exclude 'META-INF/mods.toml'
    configure {
        finalizedBy replaceVersions
    }
}

classes.configure {
    dependsOn(replaceVersions)
}

jar {
    from sourceSets.main.output.classesDirs
    from sourceSets.api.output.classesDirs
    from sourceSets.main.output.resourcesDir
    from sourceSets.api.output.resourcesDir

    sourceSets.main.resources {
        exclude "${mod_id}_resources/.cache"
        exclude '.cache'
    }

    manifest.attributes([
            "Specification-Title"     : "${mod_id}",
            "Specification-Vendor"    : "yamahari",
            "Specification-Version"   : "${project.version}",
            "Implementation-Title"    : "${mod_id}",
            "Implementation-Version"  : "${project.version}",
            "Implementation-Vendor"   : "yamahari",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "Automatic-Module-Name"   : "${mod_id}"
    ])

    finalizedBy 'reobfJar'
}

task apiJar(type: Jar, dependsOn: apiClasses) {
    archiveClassifier.set('api')
    from sourceSets.api.output
    manifest.attributes([
            "Specification-Title"     : "${mod_id}-api",
            "Specification-Vendor"    : "yamahari",
            "Specification-Version"   : "${project.version}",
            "Implementation-Title"    : "${mod_id}-api",
            "Implementation-Version"  : "${project.version}",
            "Implementation-Vendor"   : "yamahari",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "Automatic-Module-Name"   : "${mod_id}-api"
    ])
    afterEvaluate { finalizedBy reobfApiJar }
}

reobf {
    apiJar { classpath.from(sourceSets.api.compileClasspath) }
    jar { classpath.from(sourceSets.main.compileClasspath) }
}

task reobf {
    dependsOn reobfJar
    dependsOn reobfApiJar
}